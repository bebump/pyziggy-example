# This file is autogenerated by pyziggy

from typing import List

from pyziggy.devices_client import Device, DevicesClient
from pyziggy.parameters import (
    NumericParameter,
    QueryableNumericParameter,
    SettableAndQueryableNumericParameter,
    EnumParameter,
    SettableEnumParameter,
    BinaryParameter,
    SettableAndQueryableToggleParameter,
    _int_to_enum,
    SettableAndQueryableBinaryParameter,
    SettableBinaryParameter,
    CompositeParameter,
)
from pyziggy.mqtt_client import MqttClientImpl

from pyziggy.device_bases import *


from enum import Enum


class Enum0(Enum):
    brightness_step_down = "brightness_step_down"
    brightness_step_up = "brightness_step_up"
    button_1_hold = "button_1_hold"
    button_1_hold_release = "button_1_hold_release"
    button_1_press = "button_1_press"
    button_1_press_release = "button_1_press_release"
    button_2_hold = "button_2_hold"
    button_2_hold_release = "button_2_hold_release"
    button_2_press = "button_2_press"
    button_2_press_release = "button_2_press_release"
    button_3_hold = "button_3_hold"
    button_3_hold_release = "button_3_hold_release"
    button_3_press = "button_3_press"
    button_3_press_release = "button_3_press_release"
    button_4_hold = "button_4_hold"
    button_4_hold_release = "button_4_hold_release"
    button_4_press = "button_4_press"
    button_4_press_release = "button_4_press_release"
    dial_rotate_left_fast = "dial_rotate_left_fast"
    dial_rotate_left_slow = "dial_rotate_left_slow"
    dial_rotate_left_step = "dial_rotate_left_step"
    dial_rotate_right_fast = "dial_rotate_right_fast"
    dial_rotate_right_slow = "dial_rotate_right_slow"
    dial_rotate_right_step = "dial_rotate_right_step"


class Enum1(Enum):
    left = "left"
    right = "right"


class Enum2(Enum):
    rotate = "rotate"
    step = "step"


class Enum3(Enum):
    blink = "blink"
    breathe = "breathe"
    channel_change = "channel_change"
    finish_effect = "finish_effect"
    okay = "okay"
    stop_effect = "stop_effect"


class Enum4(Enum):
    off = "off"
    on = "on"
    previous = "previous"
    toggle = "toggle"


class Enum5(Enum):
    identify = "identify"


class Enum6(Enum):
    blink = "blink"
    breathe = "breathe"
    candle = "candle"
    channel_change = "channel_change"
    colorloop = "colorloop"
    finish_effect = "finish_effect"
    fireplace = "fireplace"
    okay = "okay"
    stop_effect = "stop_effect"
    stop_hue_effect = "stop_hue_effect"


class Enum7(Enum):
    off = "off"
    off_on = "off/on"
    on = "on"
    on_off = "on/off"


class Enum8(Enum):
    off = "off"
    on = "on"
    restore = "restore"


class Enum9(Enum):
    arrow_left_click = "arrow_left_click"
    arrow_left_hold = "arrow_left_hold"
    arrow_left_release = "arrow_left_release"
    arrow_right_click = "arrow_right_click"
    arrow_right_hold = "arrow_right_hold"
    arrow_right_release = "arrow_right_release"
    brightness_down_click = "brightness_down_click"
    brightness_down_hold = "brightness_down_hold"
    brightness_down_release = "brightness_down_release"
    brightness_up_click = "brightness_up_click"
    brightness_up_hold = "brightness_up_hold"
    brightness_up_release = "brightness_up_release"
    toggle = "toggle"
    toggle_hold = "toggle_hold"


class Enum10(Enum):
    arrow_left_click = "arrow_left_click"
    arrow_left_hold = "arrow_left_hold"
    arrow_left_release = "arrow_left_release"
    arrow_right_click = "arrow_right_click"
    arrow_right_hold = "arrow_right_hold"
    arrow_right_release = "arrow_right_release"
    brightness_move_down = "brightness_move_down"
    brightness_move_up = "brightness_move_up"
    brightness_stop = "brightness_stop"
    off = "off"
    on = "on"


class Enum11(Enum):
    blink = "blink"
    breathe = "breathe"
    channel_change = "channel_change"
    colorloop = "colorloop"
    finish_effect = "finish_effect"
    okay = "okay"
    stop_colorloop = "stop_colorloop"
    stop_effect = "stop_effect"


class EnumParameterForEnum0(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum0

    def get_enum_value(self) -> Enum0:
        return _int_to_enum(Enum0, int(self.get()))


class EnumParameterForEnum1(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum1

    def get_enum_value(self) -> Enum1:
        return _int_to_enum(Enum1, int(self.get()))


class EnumParameterForEnum10(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum10

    def get_enum_value(self) -> Enum10:
        return _int_to_enum(Enum10, int(self.get()))


class EnumParameterForEnum11(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum11

    def get_enum_value(self) -> Enum11:
        return _int_to_enum(Enum11, int(self.get()))


class EnumParameterForEnum2(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum2

    def get_enum_value(self) -> Enum2:
        return _int_to_enum(Enum2, int(self.get()))


class EnumParameterForEnum3(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum3

    def get_enum_value(self) -> Enum3:
        return _int_to_enum(Enum3, int(self.get()))


class EnumParameterForEnum4(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum4

    def get_enum_value(self) -> Enum4:
        return _int_to_enum(Enum4, int(self.get()))


class EnumParameterForEnum5(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum5

    def get_enum_value(self) -> Enum5:
        return _int_to_enum(Enum5, int(self.get()))


class EnumParameterForEnum6(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum6

    def get_enum_value(self) -> Enum6:
        return _int_to_enum(Enum6, int(self.get()))


class EnumParameterForEnum7(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum7

    def get_enum_value(self) -> Enum7:
        return _int_to_enum(Enum7, int(self.get()))


class EnumParameterForEnum8(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum8

    def get_enum_value(self) -> Enum8:
        return _int_to_enum(Enum8, int(self.get()))


class EnumParameterForEnum9(EnumParameter):
    def __init__(self, property: str, enum_values: List[str]):
        super().__init__(property, enum_values)
        self.enum_type = Enum9

    def get_enum_value(self) -> Enum9:
        return _int_to_enum(Enum9, int(self.get()))


class SettableEnumParameterForEnum11(SettableEnumParameter, EnumParameterForEnum11):
    def set_enum_value(self, value: Enum11) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class SettableEnumParameterForEnum3(SettableEnumParameter, EnumParameterForEnum3):
    def set_enum_value(self, value: Enum3) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class SettableEnumParameterForEnum4(SettableEnumParameter, EnumParameterForEnum4):
    def set_enum_value(self, value: Enum4) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class SettableEnumParameterForEnum5(SettableEnumParameter, EnumParameterForEnum5):
    def set_enum_value(self, value: Enum5) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class SettableEnumParameterForEnum6(SettableEnumParameter, EnumParameterForEnum6):
    def set_enum_value(self, value: Enum6) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class SettableEnumParameterForEnum7(SettableEnumParameter, EnumParameterForEnum7):
    def set_enum_value(self, value: Enum7) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class SettableEnumParameterForEnum8(SettableEnumParameter, EnumParameterForEnum8):
    def set_enum_value(self, value: Enum8) -> None:
        self.set(self._transform_mqtt_to_internal_value(value.value))


class CompositeParameterVariant(CompositeParameter):
    def __init__(self, property: str, arg0, arg1):
        self.execute_if_off = SettableAndQueryableBinaryParameter("execute_if_off")
        self.current_level_startup = SettableAndQueryableNumericParameter("current_level_startup", arg0, arg1)
        CompositeParameter.__init__(self, property)


class CompositeParameterVariant0(CompositeParameter):
    def __init__(self, property: str):
        self.execute_if_off = SettableBinaryParameter("execute_if_off")
        CompositeParameter.__init__(self, property)


class CompositeParameterVariant1(CompositeParameter):
    def __init__(self, property: str, arg0, arg1, arg2, arg3):
        self.x = SettableAndQueryableNumericParameter("x", arg0, arg1)
        self.y = SettableAndQueryableNumericParameter("y", arg2, arg3)
        CompositeParameter.__init__(self, property)


class CompositeParameterVariant2(CompositeParameter):
    def __init__(self, property: str, arg0, arg1, arg2, arg3):
        self.hue = SettableAndQueryableNumericParameter("hue", arg0, arg1)
        self.saturation = SettableAndQueryableNumericParameter("saturation", arg2, arg3)
        CompositeParameter.__init__(self, property)


class IKEA_BADRING_Water_Leakage_Sensor(Device):
    def __init__(self, name):
        self.battery = QueryableNumericParameter("battery", 0, 100)
        self.identify = SettableEnumParameterForEnum5("identify", [e.value for e in Enum5])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.water_leak = BinaryParameter("water_leak")
        Device.__init__(self, name)


class IKEA_Remote_Control_N2(Device):
    def __init__(self, name):
        self.action = EnumParameterForEnum10("action", [e.value for e in Enum10])
        self.battery = QueryableNumericParameter("battery", 0, 100)
        self.identify = SettableEnumParameterForEnum5("identify", [e.value for e in Enum5])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        Device.__init__(self, name)


class IKEA_STOFTMOLN_ceiling_wall_lamp_WW37(Device, LightWithDimming):
    def __init__(self, name):
        LightWithDimming.__init__(self, 0, 254)
        self.effect = SettableEnumParameterForEnum3("effect", [e.value for e in Enum3])
        self.identify = SettableEnumParameterForEnum5("identify", [e.value for e in Enum5])
        self.level_config = CompositeParameterVariant("level_config", 1, 254)
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class IKEA_TRADFRI_bulb_E14_WS_globe_470lm(Device, LightWithColorTemp):
    def __init__(self, name):
        LightWithColorTemp.__init__(self, 0, 254, 250, 454)
        self.color_options = CompositeParameterVariant0("color_options")
        self.color_temp_startup = SettableAndQueryableNumericParameter("color_temp_startup", 250, 454)
        self.effect = SettableEnumParameterForEnum3("effect", [e.value for e in Enum3])
        self.identify = SettableEnumParameterForEnum5("identify", [e.value for e in Enum5])
        self.level_config = CompositeParameterVariant("level_config", 1, 254)
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class IKEA_TRADFRI_bulb_E27_CWS_globe_806lm(Device, LightWithColor):
    def __init__(self, name):
        LightWithColor.__init__(self, 0, 254, 250, 454, -2147483648, 2147483647, -2147483648, 2147483647, -2147483648, 2147483647, -2147483648, 2147483647)
        self.color_options = CompositeParameterVariant0("color_options")
        self.color_temp_startup = SettableAndQueryableNumericParameter("color_temp_startup", 250, 454)
        self.effect = SettableEnumParameterForEnum11("effect", [e.value for e in Enum11])
        self.identify = SettableEnumParameterForEnum5("identify", [e.value for e in Enum5])
        self.level_config = CompositeParameterVariant("level_config", 1, 254)
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class IKEA_TRADFRI_remote_control(Device):
    def __init__(self, name):
        self.action = EnumParameterForEnum9("action", [e.value for e in Enum9])
        self.battery = QueryableNumericParameter("battery", 0, 100)
        self.identify = SettableEnumParameterForEnum5("identify", [e.value for e in Enum5])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        Device.__init__(self, name)


class Innr_RB_248_T(Device, LightWithColorTemp):
    def __init__(self, name):
        LightWithColorTemp.__init__(self, 0, 254, 153, 555)
        self.color_xy = CompositeParameterVariant1("color", -2147483648, 2147483647, -2147483648, 2147483647)
        self.color_temp_startup = SettableAndQueryableNumericParameter("color_temp_startup", 153, 555)
        self.effect = SettableEnumParameterForEnum11("effect", [e.value for e in Enum11])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class Innr_RB_249_T(Device, LightWithColorTemp):
    def __init__(self, name):
        LightWithColorTemp.__init__(self, 0, 254, 200, 454)
        self.color_temp_startup = SettableAndQueryableNumericParameter("color_temp_startup", 200, 454)
        self.effect = SettableEnumParameterForEnum3("effect", [e.value for e in Enum3])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class Innr_RB_279_T(Device, LightWithColorTemp):
    def __init__(self, name):
        LightWithColorTemp.__init__(self, 0, 254, 153, 555)
        self.color_temp_startup = SettableAndQueryableNumericParameter("color_temp_startup", 153, 555)
        self.effect = SettableEnumParameterForEnum3("effect", [e.value for e in Enum3])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class Philips_LCL007(Device, LightWithColor):
    def __init__(self, name):
        LightWithColor.__init__(self, 0, 254, 150, 500, -2147483648, 2147483647, -2147483648, 2147483647, -2147483648, 2147483647, -2147483648, 2147483647)
        self.color_temp_startup = SettableAndQueryableNumericParameter("color_temp_startup", 150, 500)
        self.effect = SettableEnumParameterForEnum6("effect", [e.value for e in Enum6])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power_on_behavior = SettableEnumParameterForEnum4("power_on_behavior", [e.value for e in Enum4])
        Device.__init__(self, name)


class Philips_RDM002(Device):
    def __init__(self, name):
        self.action = EnumParameterForEnum0("action", [e.value for e in Enum0])
        self.action_direction = EnumParameterForEnum1("action_direction", [e.value for e in Enum1])
        self.action_step_size = NumericParameter("action_step_size", 0, 255)
        self.action_time = NumericParameter("action_time", 0, 255)
        self.action_type = EnumParameterForEnum2("action_type", [e.value for e in Enum2])
        self.battery = NumericParameter("battery", 0, 100)
        self.brightness = NumericParameter("brightness", 0, 255)
        self.linkquality = NumericParameter("linkquality", 0, 255)
        Device.__init__(self, name)


class SONOFF_SNZB_02P(Device):
    def __init__(self, name):
        self.battery = QueryableNumericParameter("battery", 0, 100)
        self.humidity = QueryableNumericParameter("humidity", -2147483648, 2147483647)
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.temperature = QueryableNumericParameter("temperature", -2147483648, 2147483647)
        Device.__init__(self, name)


class Tuya_TS011F(Device):
    def __init__(self, name):
        self.countdown = SettableAndQueryableNumericParameter("countdown", 0, 43200)
        self.current = NumericParameter("current", -2147483648, 2147483647)
        self.energy = NumericParameter("energy", -2147483648, 2147483647)
        self.indicator_mode = SettableEnumParameterForEnum7("indicator_mode", [e.value for e in Enum7])
        self.linkquality = NumericParameter("linkquality", 0, 255)
        self.power = NumericParameter("power", -2147483648, 2147483647)
        self.power_outage_memory = SettableEnumParameterForEnum8("power_outage_memory", [e.value for e in Enum8])
        self.state = SettableAndQueryableToggleParameter("state")
        self.voltage = NumericParameter("voltage", -2147483648, 2147483647)
        Device.__init__(self, name)


class AvailableDevices(DevicesClient):
    def __init__(self, impl: MqttClientImpl | None = None):
        super().__init__(impl)
        self.philips_switch = Philips_RDM002("Philips Switch")
        self.reading_lamp = Innr_RB_249_T("Reading Lamp")
        self.dining_light_1 = Innr_RB_279_T("Dining Light 1")
        self.dining_light_2 = Innr_RB_279_T("Dining Light 2")
        self.kitchen_light = IKEA_STOFTMOLN_ceiling_wall_lamp_WW37("Kitchen Light")
        self.lampion = Innr_RB_249_T("Lampion")
        self.fado = Innr_RB_279_T("Fado")
        self.desk_lamp = IKEA_TRADFRI_bulb_E14_WS_globe_470lm("Desk Lamp")
        self.tokabo = IKEA_TRADFRI_bulb_E14_WS_globe_470lm("Tokabo")
        self.hue_lightstrip = Philips_LCL007("Hue lightstrip")
        self.living_room_temp = SONOFF_SNZB_02P("Living room temp")
        self.plug = Tuya_TS011F("Plug")
        self.bedroom_temp = SONOFF_SNZB_02P("Bedroom temp")
        self.tradfri_remote = IKEA_TRADFRI_remote_control("Tradfri remote")
        self.ikea_remote = IKEA_Remote_Control_N2("Ikea remote")
        self.office_temp = SONOFF_SNZB_02P("Office temp")
        self.couch = Philips_LCL007("Couch")
        self.bathroom_temp = SONOFF_SNZB_02P("Bathroom temp")
        self.switch_kitchen = Philips_RDM002("Switch Kitchen")
        self.color_bulb = IKEA_TRADFRI_bulb_E27_CWS_globe_806lm("Color bulb")
        self.printer = Innr_RB_248_T("Printer")
        self.switch_poang = Philips_RDM002("Switch Poang")
        self.a0x001788010ea91642 = Philips_LCL007("0x001788010ea91642")
        self.standing_lamp = Innr_RB_279_T("Standing Lamp")
        self.tallbyn = Innr_RB_279_T("Tallbyn")
        self.dishwasher_leak_sensor = IKEA_BADRING_Water_Leakage_Sensor("dishwasher leak sensor")

